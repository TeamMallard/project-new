package com.mygdx.game;

import java.util.Arrays;

/**
 * Manages the equipment currently equipped to an agent.
 * Stores the ID of the currently equipped equipment in the relevant variable.
 * Can only have one of each type of equipment equipped at once.
 */
public class CurrentEquipment {
	
	
	public static enum slot {HEAD, CHEST, FEET, ACCESSORY, WEAPON};
	public static enum modifier {AGI, STR, DEX, INT, DEF};

    public int[] equipSlots = new int[slot.values().length]; //Stores equipped equipment in order: head, chest, feet, accessory, weapon
    private int[] totalStatModifiers = new int[modifier.values().length]; //Ordered: speed, strength, dexterity, intelligence, armourVal


    @Override
    public String toString() {
        return "CurrentEquipment{" +
                "equipSlots=" + Arrays.toString(equipSlots) +
                '}';
    }

    public CurrentEquipment(int head, int chest, int feet, int accessory, int weapon) {

        equipSlots[slot.HEAD.ordinal()] = head;
        equipSlots[slot.CHEST.ordinal()] = chest;
        equipSlots[slot.FEET.ordinal()] = feet;
        equipSlots[slot.ACCESSORY.ordinal()] = accessory;
        equipSlots[slot.WEAPON.ordinal()] = weapon;

        totalStatModifiers=calculateTotalStatModifiers();
    }
    /**
     * Empty constructor required for class to be generated by deserialising json.
     */
    public CurrentEquipment(){};

    //Gets the total modifiers by summing the modifiers of each piece of equipped equipment
    private int[] calculateTotalStatModifiers(){
        int[][] totalStatModifiersPerItem= new int[5][5];//2x2 array that stores the total stats of each item on its own row

        for(int i=0; i<slot.values().length; i++){
            totalStatModifiersPerItem[i] = Game.items.getEquipment(equipSlots[i]).getModifiers();
        }

        int[] totalStatModifiers = new int[5];


        for(int column = 0; column<5; column++){
            for(int row = 0; row<5; row++) {
                totalStatModifiers[column]+=totalStatModifiersPerItem[row][column];
            }
        }
        System.out.println("total modifiers:" + Arrays.toString(totalStatModifiers));
        return totalStatModifiers;
    }

    //NEED TO DO SOMETHING ABOUT UNEQUIPPING ALSO
    public void equip(int id){
        Equipment item = Game.items.getEquipment(id);
        equipSlots[item.getType().slot()] = id;
        totalStatModifiers = calculateTotalStatModifiers();
    }

    /**
     * Unequips the equipment in the specified slot.
     * @param slot the slot to unequip from
     * @return the id of the item that was in the slot
     */
    public int unequip(Equipment.EquipType slot) {
        int id = equipSlots[slot.slot()];
        equipSlots[slot.slot()] = 0;
        return id;
    }

    /**
     * Checks if something is equipped in the specified slot.
     * @param slot the slot to check for equipment
     * @return true if there is an item equipped in the slot, false if not
     */
    public boolean isEquipped(Equipment.EquipType slot) {
        return equipSlots[slot.slot()] != 0;
    }

    /**
     * @return the total number of equipment that the player is currently wearing
     */
    public int getNumberEquipped() {
        int equipped = 0;

        for (int equipSlot : equipSlots) {
            if (equipSlot != 0) {
                equipped++;
            }
        }

        return equipped;
    }

    /**
     * @return int array of total stat modifiers from currently equipped equipment in order: speed, strength, dexterity, intelligence, armourVal
     */
    public int[] getTotalStatModifiers() {
        return totalStatModifiers;
    }

    public int getTotalSpeedModifiers(){return totalStatModifiers[0];}
    public int getTotalStrengthModifiers(){return totalStatModifiers[1];}
    public int getTotalDexterityModifiers(){return totalStatModifiers[2];}
    public int getTotalIntelligenceModifiers(){return totalStatModifiers[3];}
    public int getTotalArmourValModifiers(){return totalStatModifiers[4];}
}
